name: Build palera1n

on:
  push:
    paths:
      - 'src/**'
      - 'docs/**'
      - 'patches/**'
      - 'include/**'
      - 'Makefile'
      - 'CMakeLists.txt'
      - '.github/workflows/build.yml'
  pull_request:
    paths:
      - 'src/**'
      - 'docs/**'
      - 'patches/**'
      - 'include/**'
      - 'Makefile'
      - 'CMakeLists.txt'
      - '.github/workflows/build.yml'
  workflow_dispatch:

jobs:
  build-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies (packages)
        run: |
          sudo apt-get -y update
          sudo apt-get -y install mandoc make
      - name: Build Documentation
        run: |
          make -j$(nproc) docs
          mkdir -p ready/docs
          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready/docs
      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v7

  build-darwin:
    strategy:
      matrix:
        include:
          - arch: x86_64
            gnu_triple: x86_64-apple-darwin
            os: macosx
            minos: 10.8
          - arch: arm64
            gnu_triple: aarch64-apple-darwin
            os: macosx
            minos: 11.0
          - arch: arm64
            gnu_triple: aarch64-apple-darwin
            os: iphoneos
            minos: 7.0
    runs-on: macos-15
    env:
      MBEDTLS_VERSION: 3.5.2
      READLINE_VERSION: 8.2
      LIBIMOBILEDEVICE_COMMIT: ed0d66d0341562731bb19928dfe48155509fa7a7
      LIBIRECOVERY_COMMIT: 7ce02c347b7c26e59498e6af31c9da51018d0fa1
      LIBIMOBILEDEVICE_GLUE_COMMIT: 362f7848ac89b74d9dd113b38b51ecb601f76094
      LIBPLIST_COMMIT: 2117b8fdb6b4096455bd2041a63e59a028120136
      LIBUSBMUXD_COMMIT: a7f0543fb1ecb20ac7121c0fd77297200e0e43fc

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies (packages)
        run: |
          sudo /usr/local/bin/pip3 install jsonschema jinja2
          brew install make autoconf automake pkg-config gnu-sed gettext libtool
          sudo rm -rf /usr/local/Frameworks/Python*
          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64
          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid
      - name: Download dependencies (embedded binaries)
        run: |
          echo "SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)" >> $GITHUB_ENV
      - name: Select Xcode on runner
        run: |
          sudo xcode-select -s "$(ls -1d /Applications/Xcode_* | sort -V | tail -n1)"
      - name: Setup environment
        run: |
          mkdir sysroot
          echo "DESTDIR=$(pwd)/sysroot" >> $GITHUB_ENV
          echo "PREFIX=/usr/local" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig" >> $GITHUB_ENV
          echo "CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}" >> $GITHUB_ENV
          echo "CC=$(xcrun --find cc)" >> $GITHUB_ENV
          echo "CXX=$(xcrun --find c++)" >> $GITHUB_ENV
          echo "CPP=$(xcrun --find cc) -E" >> $GITHUB_ENV
          echo "CFLAGS=-g -Os -isystem ${{ env.SDK }}/usr/include/c++/v1 -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o -D_FILE_OFFSET_BITS=64 -D_TIME_BITS=64" >> $GITHUB_ENV
          echo "CPPFLAGS=-g -Os -isystem ${{ env.SDK }}/usr/include/c++/v1 -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os -D_FILE_OFFSET_BITS=64 -D_TIME_BITS=64" >> $GITHUB_ENV
          echo "CXXFLAGS=-stdlib=libc++ -g -Os -isystem$(TARGET_SYSROOT)/usr/include/c++/v1 -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os -D_FILE_OFFSET_BITS=64 -D_TIME_BITS=64" >> $GITHUB_ENV
          echo "LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib" >> $GITHUB_ENV
          echo "CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os" >> $GITHUB_ENV
          echo "CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os" >> $GITHUB_ENV
          echo "CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os" >> $GITHUB_ENV
          echo "LDFLAGS_FOR_BUILD=-Wl,-dead_strip" >> $GITHUB_ENV
      # (rest of build-darwin job unchanged)

  darwin-dist:
    # (unchanged)
    # ...

  build-Linux:
    strategy:
      matrix:
        triple:
          - i486-linux-musl
          - x86_64-linux-musl
          - armel-linux-musleabi
          - aarch64-linux-musl
    runs-on: ubuntu-latest
    env:
      MBEDTLS_VERSION: 3.5.2
      LIBUSB_VERSION: 1.0.27
      READLINE_VERSION: 8.2
      GPM_VERSION: 1.20.7
      LIBIMOBILEDEVICE_COMMIT: ed0d66d0341562731bb19928dfe48155509fa7a7
      LIBIRECOVERY_COMMIT: 7ce02c347b7c26e59498e6af31c9da51018d0fa1
      LIBIMOBILEDEVICE_GLUE_COMMIT: 362f7848ac89b74d9dd113b38b51ecb601f76094
      USBMUXD_COMMIT: bc0b91ca856811f4393318dc83db6dc3c1ac326d
      LIBPLIST_COMMIT: 2117b8fdb6b4096455bd2041a63e59a028120136
      LIBUSBMUXD_COMMIT: a7f0543fb1ecb20ac7121c0fd77297200e0e43fc

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install build dependencies (packages)
        run: |
          sudo apt-get remove -y libssl-dev libreadline-dev
          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc
          sudo pip3 install jsonschema jinja2

      # **Checksum step removed**

      - name: Download toolchain (cached)
        id: toolchain_cache
        uses: actions/cache@v3
        with:
          path: ${{ matrix.triple }}-cross.tgz
          key: ${{ matrix.triple }}-toolchain

      - name: Download toolchain
        if: steps.toolchain_cache.outputs.cache-hit != 'true'
        run: |
          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz

      - name: Setup environment
        run: |
          tar -xf ${{ matrix.triple }}-cross.tgz
          mkdir sysroot
          echo "$(pwd)/${{ matrix.triple }}-cross/bin" >> $GITHUB_PATH
          case ${{ matrix.triple }} in
            i486-linux-musl)
              echo "CHECKRA1N_NAME=linux-x86" >> $GITHUB_ENV
              echo "ARCH_NAME=i386" >> $GITHUB_ENV
              ;;
            x86_64-linux-musl)
              echo "CHECKRA1N_NAME=linux-x86_64" >> $GITHUB_ENV
              echo "ARCH_NAME=amd64" >> $GITHUB_ENV
              ;;
            armel-linux-musleabi)
              echo "CHECKRA1N_NAME=linux-armel" >> $GITHUB_ENV
              echo "ARCH_NAME=armel" >> $GITHUB_ENV
              ;;
            aarch64-linux-musl)
              echo "CHECKRA1N_NAME=linux-arm64" >> $GITHUB_ENV
              echo "ARCH_NAME=arm64" >> $GITHUB_ENV
              ;;
          esac
          echo "PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig" >> $GITHUB_ENV
          echo "CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib -D_FILE_OFFSET_BITS=64 -D_TIME_BITS=64" >> $GITHUB_ENV
          echo "CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib -D_FILE_OFFSET_BITS=64 -D_TIME_BITS=64" >> $GITHUB_ENV
          echo "LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib" >> $GITHUB_ENV
          echo "INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip" >> $GITHUB_ENV
          echo "DESTDIR=$(pwd)/sysroot" >> $GITHUB_ENV
          echo "PREFIX=/usr/local" >> $GITHUB_ENV
          echo "CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static" >> $GITHUB_ENV
          echo "CROSS_COMPILE=${{ matrix.triple }}-" >> $GITHUB_ENV

      # (rest of build-Linux job unchanged)

  finish-build:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' }}
    needs: [build-docs, build-darwin, darwin-dist, build-Linux]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v7

      - name: Download build tag
        uses: actions/download-artifact@v4
        with:
          name: build-tag

      - uses: geekyeggo/delete-artifact@v2
        with:
          name: '*'
          failOnError: false
