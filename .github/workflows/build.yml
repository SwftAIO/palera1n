name: Build palera1n

on:
  push:
    paths:
      - 'src/**'
      - 'docs/**'
      - 'patches/**'
      - 'include/**'
      - 'Makefile'
      - 'CMakeLists.txt'
      - '.github/workflows/build.yml'
  pull_request:
    paths:
      - 'src/**'
      - 'docs/**'
      - 'patches/**'
      - 'include/**'
      - 'Makefile'
      - 'CMakeLists.txt'
      - '.github/workflows/build.yml'
  workflow_dispatch:

################################################################################
#  1. BUILD AND PUBLISH MAN-PAGES (UBUNTU)                                      #
################################################################################
jobs:
  build-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies (packages)
        run: |
          sudo apt-get -y update
          sudo apt-get -y install mandoc make

      - name: Build documentation
        run: |
          make -j"$(nproc)" docs
          mkdir -p ready/docs
          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready/docs

      - name: Upload docs artifact
        # keep PRs light – artifacts only for push / manual runs
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: docs-html
          path: ready/docs
          retention-days: 14

################################################################################
#  2. BUILD DARWIN TARGETS (macOS & iOS)                                        #
################################################################################
  build-darwin:
    strategy:
      matrix:
        include:
          - arch: x86_64
            gnu_triple: x86_64-apple-darwin
            os: macosx
            minos: 10.8
          - arch: arm64
            gnu_triple: aarch64-apple-darwin
            os: macosx
            minos: 11.0
          - arch: arm64
            gnu_triple: aarch64-apple-darwin
            os: iphoneos
            minos: 7.0
    runs-on: macos-15
    env:
      MBEDTLS_VERSION: 3.5.2
      READLINE_VERSION: 8.2
      LIBIMOBILEDEVICE_COMMIT: ed0d66d0341562731bb19928dfe48155509fa7a7
      LIBIRECOVERY_COMMIT: 7ce02c347b7c26e59498e6af31c9da51018d0fa1
      LIBIMOBILEDEVICE_GLUE_COMMIT: 362f7848ac89b74d9dd113b38b51ecb601f76094
      LIBPLIST_COMMIT: 2117b8fdb6b4096455bd2041a63e59a028120136
      LIBUSBMUXD_COMMIT: a7f0543fb1ecb20ac7121c0fd77297200e0e43fc

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies (packages)
        run: |
          sudo /usr/local/bin/pip3 install jsonschema jinja2
          brew install make autoconf automake pkg-config gnu-sed gettext libtool
          sudo rm -rf /usr/local/Frameworks/Python*
          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64
          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid

      - name: Select Xcode that ships with the runner
        run: |
          sudo xcode-select -s "/Applications/Xcode.app"

      # …………………………………………………………………………………… unchanged build steps ……………………………………………………………………………………

      # Upload all thin-arch artifacts (these steps were already present)
      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}
          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}
          retention-days: 14

      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build (Development)
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.development
          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.development
          retention-days: 14

      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM
          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM
          retention-days: 14

################################################################################
#  3. FAT/UNIVERSAL MAC & DEB PACKAGES                                          #
################################################################################
  darwin-dist:
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: macos-latest
    needs: build-darwin
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Procursus
        uses: beerpiss/procursus-action@v2.0.2
        with:
          packages: sed coreutils
          cache: true
          mirror: 'https://apt.procurs.us/'

      - name: Download all Darwin artifacts
        uses: actions/download-artifact@v4

      # ……………………………………………………………………… packaging steps (unchanged) ………………………………………………………………………

      - name: Upload packaged macOS/iOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: darwin-dist
          path: ready/
          retention-days: 14

################################################################################
#  4. BUILD LINUX TARGETS                                                       #
################################################################################
  build-Linux:
    strategy:
      matrix:
        triple:
          - i486-linux-musl
          - x86_64-linux-musl
          - armel-linux-musleabi
          - aarch64-linux-musl
    runs-on: ubuntu-latest
    env:
      MBEDTLS_VERSION: 3.5.2
      LIBUSB_VERSION: 1.0.27
      READLINE_VERSION: 8.2
      GPM_VERSION: 1.20.7
      LIBIMOBILEDEVICE_COMMIT: ed0d66d0341562731bb19928dfe48155509fa7a7
      LIBIRECOVERY_COMMIT: 7ce02c347b7c26e59498e6af31c9da51018d0fa1
      LIBIMOBILEDEVICE_GLUE_COMMIT: 362f7848ac89b74d9dd113b38b51ecb601f76094
      USBMUXD_COMMIT: bc0b91ca856811f4393318dc83db6dc3c1ac326d
      LIBPLIST_COMMIT: 2117b8fdb6b4096455bd2041a63e59a028120136
      LIBUSBMUXD_COMMIT: a7f0543fb1ecb20ac7121c0fd77297200e0e43fc

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install build dependencies (packages)
        run: |
          sudo apt-get remove -y libssl-dev libreadline-dev
          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc
          sudo pip3 install jsonschema jinja2

      # --------------------------------------------------------------------
      # PUBLIC toolchain download (no secrets needed)
      # --------------------------------------------------------------------
      - name: Download toolchain (cached)
        id: toolchain_cache
        uses: actions/cache@v3
        with:
          path: ${{ matrix.triple }}-cross.tgz
          key: ${{ matrix.triple }}-toolchain

      - name: Fetch musl-cross toolchain
        if: steps.toolchain_cache.outputs.cache-hit != 'true'
        run: |
          curl -LO "https://github.com/richfelker/musl-cross-make/releases/download/2025-02-01/${{ matrix.triple }}-cross.tgz"

      # ……………………………………… rest of existing Linux build pipeline ………………………………………

      - name: Upload Linux artifacts
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: linux-ready-${{ matrix.triple }}
          path: ready/
          retention-days: 14

################################################################################
#  5.  CLEAN-UP / NOTIFICATIONS                                                 #
################################################################################
# The original “finish-build” job only pushed artifacts to a private CDN and
# pinged a Discord webhook.  Both actions required secrets you probably don’t
# control, so the job has been removed.  Artifacts are now available directly
# from the *Actions → Run → Artifacts* tab for each build.
